{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\MOBOMEDIA\\\\mobotcmsdemo\\\\Frontendtech\\\\reactnative\\\\story\\\\TechVlog\\\\Screens\\\\storycreate.js\";\nimport React, { useState, createRef, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport Axios from 'axios';\nimport Loader from \"./loader\";\nexport default function Storycreatescreen() {\n  var _this = this;\n\n  var getdata = function getdata() {\n    var users, userdatas, gettoken, getuserid, geturl, config;\n    return _regeneratorRuntime.async(function getdata$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userdatas'));\n\n          case 3:\n            users = _context.sent;\n            userdatas = JSON.parse(users);\n            console.log(userdatas);\n\n            _this.setState({\n              data: userdatas\n            });\n\n            gettoken = _this.state.data.token;\n            getuserid = _this.state.data.userid;\n            console.log(gettoken);\n            geturl = 'http://192.168.1.4:8000/api/getuserdetails/';\n            config = {\n              headers: {\n                'content-type': 'multipart/form-data',\n                'Authorization': 'Bearer ' + gettoken,\n                'Accept': 'application/json'\n              }\n            };\n            Axios.get(geturl + getuserid, config).then(function (response) {\n              _this.setState({\n                profiles: response.data.profile\n              });\n            }).catch(function (error) {\n              console.log(error);\n            });\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  useEffect(function () {\n    getdata();\n  }, []);\n\n  var Storycreatescreen = function Storycreatescreen(props) {\n    var _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setusername = _useState2[1];\n\n    var _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        useremail = _useState4[0],\n        setuseremail = _useState4[1];\n\n    var _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        title = _useState6[0],\n        settitle = _useState6[1];\n\n    var _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        storypara = _useState8[0],\n        setstorypara = _useState8[1];\n\n    var _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        errortext = _useState10[0],\n        setErrortext = _useState10[1];\n\n    var _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        isRegistraionSuccess = _useState12[0],\n        setIsRegistraionSuccess = _useState12[1];\n\n    var emailInputRef = createRef();\n    var ageInputRef = createRef();\n    var addressInputRef = createRef();\n    var passwordInputRef = createRef();\n\n    var handleSubmitButton = function handleSubmitButton() {\n      setErrortext('');\n\n      if (!title) {\n        alert('Please fill title');\n        return;\n      }\n\n      if (!storypara) {\n        alert('Please fill content');\n        return;\n      }\n\n      var url = 'http://192.168.1.4:8000/api/createaccount';\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: title,\n          storypara: storypara\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        console.log(responseJson);\n\n        if (responseJson.message === 'success') {\n          setIsRegistraionSuccess(true);\n          console.log('Story created Successful...');\n        } else {\n          setErrortext(responseJson.msg);\n        }\n      }).catch(function (error) {\n        console.error(error);\n      });\n    };\n\n    if (isRegistraionSuccess) {\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: '#307ecc',\n          justifyContent: 'center'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      }, React.createElement(Image, {\n        style: {\n          height: 150,\n          resizeMode: 'contain',\n          alignSelf: 'center'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }\n      }), React.createElement(Text, {\n        style: styles.successTextStyle,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      }, \"Story created Successful\"), React.createElement(TouchableOpacity, {\n        style: styles.buttonStyle,\n        activeOpacity: 0.5,\n        onPress: function onPress() {\n          return props.navigation.navigate('LoginScreen');\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonTextStyle,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }\n      }, \"view story Now\")));\n    }\n\n    return React.createElement(View, {\n      style: styles.mainBody,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, React.createElement(ScrollView, {\n      keyboardShouldPersistTaps: \"handled\",\n      contentContainerStyle: {\n        justifyContent: 'center',\n        alignContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }, React.createElement(KeyboardAvoidingView, {\n      enabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, React.createElement(View, {\n      style: styles.SectionStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, React.createElement(TextInput, {\n      style: styles.inputStyle,\n      onChangeText: function onChangeText(title) {\n        return settitle(title);\n      },\n      underlineColorAndroid: \"#f000\",\n      placeholder: \"Enter Title\",\n      placeholderTextColor: \"#8b9cb5\",\n      returnKeyType: \"next\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 29\n      }\n    })), React.createElement(View, {\n      style: styles.SectionStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }\n    }, React.createElement(TextInput, {\n      style: styles.inputStyle,\n      onChangeText: function onChangeText(storypara) {\n        return setstorypara(storypara);\n      },\n      underlineColorAndroid: \"#f000\",\n      placeholder: \"Enter content of Story\",\n      placeholderTextColor: \"#8b9cb5\",\n      autoCapitalize: \"sentences\",\n      returnKeyType: \"next\",\n      blurOnSubmit: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 29\n      }\n    })), errortext != '' ? React.createElement(Text, {\n      style: styles.errorTextStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 29\n      }\n    }, errortext) : null, React.createElement(TouchableOpacity, {\n      style: styles.buttonStyle,\n      activeOpacity: 0.5,\n      onPress: handleSubmitButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 25\n      }\n    }, React.createElement(Text, {\n      style: styles.buttonTextStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 29\n      }\n    }, \"REGISTER\")))));\n  };\n}\nvar styles = StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: 'center',\n    alignContent: 'center'\n  },\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 5,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#ff4f81',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  },\n  successTextStyle: {\n    color: 'white',\n    textAlign: 'center',\n    fontSize: 18,\n    padding: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/MOBOMEDIA/mobotcmsdemo/Frontendtech/reactnative/story/TechVlog/Screens/storycreate.js"],"names":["React","useState","createRef","useEffect","AsyncStorage","Axios","Loader","Storycreatescreen","getdata","getItem","users","userdatas","JSON","parse","console","log","setState","data","gettoken","state","token","getuserid","userid","geturl","config","headers","get","then","response","profiles","profile","catch","error","props","username","setusername","useremail","setuseremail","title","settitle","storypara","setstorypara","errortext","setErrortext","isRegistraionSuccess","setIsRegistraionSuccess","emailInputRef","ageInputRef","addressInputRef","passwordInputRef","handleSubmitButton","alert","url","fetch","method","Accept","body","stringify","json","responseJson","message","msg","flex","backgroundColor","justifyContent","height","resizeMode","alignSelf","styles","successTextStyle","buttonStyle","navigation","navigate","buttonTextStyle","mainBody","alignContent","SectionStyle","inputStyle","errorTextStyle","StyleSheet","create","flexDirection","marginTop","marginLeft","marginRight","margin","borderWidth","color","borderColor","alignItems","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","padding"],"mappings":"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","sourcesContent":["import React, { useState, createRef,useEffect  } from 'react';\r\nimport {\r\n    StyleSheet,\r\n    TextInput,\r\n    View,\r\n    Text,\r\n    Image,\r\n    KeyboardAvoidingView,\r\n    Keyboard,\r\n    TouchableOpacity,\r\n    ScrollView,\r\n} from 'react-native';\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\nimport Axios from 'axios';\r\n\r\nimport Loader from './loader';\r\nexport default function Storycreatescreen() {\r\n    const getdata = async () => {\r\n        try {\r\n            let users = await AsyncStorage.getItem('userdatas');\r\n            const userdatas = JSON.parse(users);\r\n            console.log(userdatas);\r\n            this.setState({ data: userdatas });\r\n            const gettoken = this.state.data.token;\r\n            const getuserid = this.state.data.userid;\r\n            console.log(gettoken);\r\n            const geturl = 'http://192.168.1.4:8000/api/getuserdetails/';\r\n            const config = {\r\n                headers: {\r\n                    'content-type': 'multipart/form-data',\r\n                    'Authorization': 'Bearer ' + gettoken,\r\n                    'Accept': 'application/json',\r\n                },\r\n    \r\n            };\r\n            Axios.get(geturl + getuserid, config)\r\n                .then(response => {\r\n                    this.setState({ profiles: response.data.profile });\r\n                    // console.log(response.data.profile.useremail)\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                })\r\n        } catch (e) {\r\n            // error reading value\r\n            console.log(e);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        // write your code here, it's like componentWillMount\r\n        getdata();\r\n    }, [])\r\n    \r\n    const Storycreatescreen = (props) => {\r\n        const [username, setusername] = useState('');\r\n        const [useremail, setuseremail] = useState('');\r\n        const [title, settitle] = useState('');\r\n        const [storypara, setstorypara] = useState('');\r\n        // const [password, setpassword] = useState('');\r\n        // const [loading, setLoading] = useState(false);\r\n        const [errortext, setErrortext] = useState('');\r\n        const [\r\n            isRegistraionSuccess,\r\n            setIsRegistraionSuccess\r\n        ] = useState(false);\r\n    \r\n        const emailInputRef = createRef();\r\n        const ageInputRef = createRef();\r\n        const addressInputRef = createRef();\r\n        const passwordInputRef = createRef();\r\n    \r\n        const handleSubmitButton = () => {\r\n            setErrortext('');\r\n            // if (!username) {\r\n            //     alert('Please fill Name');\r\n            //     return;\r\n            // }\r\n            // if (!useremail) {\r\n            //     alert('Please fill Email');\r\n            //     return;\r\n            // }\r\n            // if (!userage) {\r\n            //     alert('Please fill Age');\r\n            //     return;\r\n            // }\r\n            if (!title) {\r\n                alert('Please fill title');\r\n                return;\r\n            }\r\n            if (!storypara) {\r\n                alert('Please fill content');\r\n                return;\r\n            }\r\n            //Show Loader\r\n            // setLoading(true);\r\n            const url = 'http://192.168.1.4:8000/api/createaccount';\r\n            fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    // username: username,\r\n                    // useremail: useremail,\r\n                    // password: password,\r\n                    // userage: userage,\r\n                    // useraddress: useraddress,\r\n                    title: title,\r\n                    storypara: storypara\r\n                })\r\n            })\r\n                .then((response) => response.json())\r\n                .then((responseJson) => {\r\n                    //Hide Loader\r\n                    // setLoading(false);\r\n                    console.log(responseJson);\r\n                    if (responseJson.message === 'success') {\r\n                        setIsRegistraionSuccess(true);\r\n                        console.log(\r\n                            'Story created Successful...'\r\n                        );\r\n                    } else {\r\n                        setErrortext(responseJson.msg);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    //Hide Loader\r\n                    // setLoading(false);\r\n                    console.error(error);\r\n                });\r\n        };\r\n        if (isRegistraionSuccess) {\r\n            return (\r\n                <View\r\n                    style={{\r\n                        flex: 1,\r\n                        backgroundColor: '#307ecc',\r\n                        justifyContent: 'center',\r\n                    }}>\r\n                    <Image\r\n                        // source={require('../Image/success.png')}\r\n                        style={{\r\n                            height: 150,\r\n                            resizeMode: 'contain',\r\n                            alignSelf: 'center'\r\n                        }}\r\n                    />\r\n                    <Text style={styles.successTextStyle}>\r\n                        Story created Successful\r\n            </Text>\r\n                    <TouchableOpacity\r\n                        style={styles.buttonStyle}\r\n                        activeOpacity={0.5}\r\n                        onPress={() => props.navigation.navigate('LoginScreen')}>\r\n                        <Text style={styles.buttonTextStyle}>view story Now</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            );\r\n        }\r\n    \r\n        return (\r\n    \r\n            <View style={styles.mainBody}>\r\n                {/* <Loader loading={loading} /> */}\r\n                <ScrollView\r\n                    keyboardShouldPersistTaps=\"handled\"\r\n                    contentContainerStyle={{\r\n                        justifyContent: 'center',\r\n                        alignContent: 'center',\r\n                    }}>\r\n                    <KeyboardAvoidingView enabled>\r\n                        <View style={styles.SectionStyle}>\r\n                            <TextInput\r\n                                style={styles.inputStyle}\r\n                                onChangeText={(title) => settitle(title)}\r\n                                underlineColorAndroid=\"#f000\"\r\n                                placeholder=\"Enter Title\"\r\n                                placeholderTextColor=\"#8b9cb5\"\r\n                                // keyboardType=\"numeric\"\r\n                                // ref={ageInputRef}\r\n                                returnKeyType=\"next\"\r\n                            />\r\n                        </View>\r\n                        <View style={styles.SectionStyle}>\r\n                            <TextInput\r\n                                style={styles.inputStyle}\r\n                                onChangeText={(storypara) =>\r\n                                    setstorypara(storypara)\r\n                                }\r\n                                underlineColorAndroid=\"#f000\"\r\n                                placeholder=\"Enter content of Story\"\r\n                                placeholderTextColor=\"#8b9cb5\"\r\n                                autoCapitalize=\"sentences\"\r\n                                // ref={addressInputRef}\r\n                                returnKeyType=\"next\"\r\n                                blurOnSubmit={false}\r\n                            />\r\n                        </View>\r\n                        {errortext != '' ? (\r\n                            <Text style={styles.errorTextStyle}>\r\n                                {errortext}\r\n                            </Text>\r\n                        ) : null}\r\n                        <TouchableOpacity\r\n                            style={styles.buttonStyle}\r\n                            activeOpacity={0.5}\r\n                            onPress={handleSubmitButton}>\r\n                            <Text style={styles.buttonTextStyle}>REGISTER</Text>\r\n                        </TouchableOpacity>\r\n                    </KeyboardAvoidingView>\r\n                </ScrollView>\r\n            </View>\r\n        );\r\n    };\r\n}\r\n\r\n// export default Storycreatescreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    mainBody: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        // backgroundColor: '#307ecc',\r\n        alignContent: 'center',\r\n    },\r\n    SectionStyle: {\r\n        flexDirection: 'row',\r\n        height: 40,\r\n        marginTop: 5,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        margin: 10,\r\n    },\r\n    buttonStyle: {\r\n        backgroundColor: '#ff4f81',\r\n        borderWidth: 0,\r\n        color: '#FFFFFF',\r\n        borderColor: '#7DE24E',\r\n        height: 40,\r\n        alignItems: 'center',\r\n        borderRadius: 30,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n    },\r\n    buttonTextStyle: {\r\n        color: '#FFFFFF',\r\n        paddingVertical: 10,\r\n        fontSize: 16,\r\n    },\r\n    inputStyle: {\r\n        flex: 1,\r\n        color: 'white',\r\n        paddingLeft: 15,\r\n        paddingRight: 15,\r\n        borderWidth: 1,\r\n        borderRadius: 30,\r\n        borderColor: '#dadae8',\r\n    },\r\n    errorTextStyle: {\r\n        color: 'red',\r\n        textAlign: 'center',\r\n        fontSize: 14,\r\n    },\r\n    successTextStyle: {\r\n        color: 'white',\r\n        textAlign: 'center',\r\n        fontSize: 18,\r\n        padding: 30,\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}