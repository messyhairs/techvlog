{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\MOBOMEDIA\\\\mobotcmsdemo\\\\Frontendtech\\\\reactnative\\\\story\\\\TechVlog\\\\Screens\\\\storycreate.js\";\n\nimport React, { useState, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Loader from \"./loader\";\n\nvar Storycreatescreen = function Storycreatescreen(props) {\n  var _useState, _useState2, username, setusername, _useState3, _useState4, useremail, setuseremail, _useState5, _useState6, userage, setuserage, _useState7, _useState8, useraddress, setuseraddress, _useState9, _useState10, password, setpassword, _useState11, _useState12, errortext, setErrortext, _useState13, _useState14, isRegistraionSuccess, setIsRegistraionSuccess, emailInputRef, ageInputRef, addressInputRef, passwordInputRef, handleSubmitButton;\n\n  return _regeneratorRuntime.async(function Storycreatescreen$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _useState = useState(''), _useState2 = _slicedToArray(_useState, 2), username = _useState2[0], setusername = _useState2[1];\n          _useState3 = useState(''), _useState4 = _slicedToArray(_useState3, 2), useremail = _useState4[0], setuseremail = _useState4[1];\n          _useState5 = useState(''), _useState6 = _slicedToArray(_useState5, 2), userage = _useState6[0], setuserage = _useState6[1];\n          _useState7 = useState(''), _useState8 = _slicedToArray(_useState7, 2), useraddress = _useState8[0], setuseraddress = _useState8[1];\n          _useState9 = useState(''), _useState10 = _slicedToArray(_useState9, 2), password = _useState10[0], setpassword = _useState10[1];\n          _useState11 = useState(''), _useState12 = _slicedToArray(_useState11, 2), errortext = _useState12[0], setErrortext = _useState12[1];\n          _useState13 = useState(false), _useState14 = _slicedToArray(_useState13, 2), isRegistraionSuccess = _useState14[0], setIsRegistraionSuccess = _useState14[1];\n          emailInputRef = createRef();\n          ageInputRef = createRef();\n          addressInputRef = createRef();\n          passwordInputRef = createRef();\n\n          handleSubmitButton = function handleSubmitButton() {\n            setErrortext('');\n\n            if (!username) {\n              alert('Please fill Name');\n              return;\n            }\n\n            if (!useremail) {\n              alert('Please fill Email');\n              return;\n            }\n\n            if (!userage) {\n              alert('Please fill Age');\n              return;\n            }\n\n            if (!useraddress) {\n              alert('Please fill Address');\n              return;\n            }\n\n            if (!password) {\n              alert('Please fill Password');\n              return;\n            }\n\n            var url = 'http://192.168.1.4:8000/api/createaccount';\n            fetch(url, {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                username: username,\n                useremail: useremail,\n                password: password,\n                userage: userage,\n                useraddress: useraddress\n              })\n            }).then(function (response) {\n              return response.json();\n            }).then(function (responseJson) {\n              console.log(responseJson);\n\n              if (responseJson.message === 'success') {\n                setIsRegistraionSuccess(true);\n                console.log('Registration Successful. Please Login to proceed');\n              } else {\n                setErrortext(responseJson.msg);\n              }\n            }).catch(function (error) {\n              console.error(error);\n            });\n          };\n\n          if (!isRegistraionSuccess) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.abrupt(\"return\", React.createElement(View, {\n            style: {\n              flex: 1,\n              backgroundColor: '#307ecc',\n              justifyContent: 'center'\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 13\n            }\n          }, React.createElement(Image, {\n            style: {\n              height: 150,\n              resizeMode: 'contain',\n              alignSelf: 'center'\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }\n          }), React.createElement(Text, {\n            style: styles.successTextStyle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }\n          }, \"Registration Successful\"), React.createElement(TouchableOpacity, {\n            style: styles.buttonStyle,\n            activeOpacity: 0.5,\n            onPress: function onPress() {\n              return props.navigation.navigate('LoginScreen');\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 17\n            }\n          }, React.createElement(Text, {\n            style: styles.buttonTextStyle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 21\n            }\n          }, \"Login Now\"))));\n\n        case 14:\n          return _context.abrupt(\"return\", React.createElement(View, {\n            style: {\n              flex: 1,\n              backgroundColor: '#307ecc'\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 9\n            }\n          }, React.createElement(ScrollView, {\n            keyboardShouldPersistTaps: \"handled\",\n            contentContainerStyle: {\n              justifyContent: 'center',\n              alignContent: 'center'\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 13\n            }\n          }, React.createElement(View, {\n            style: {\n              alignItems: 'center'\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }\n          }, React.createElement(Image, {\n            style: {\n              width: '50%',\n              height: 100,\n              resizeMode: 'contain',\n              margin: 30\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 21\n            }\n          })), React.createElement(KeyboardAvoidingView, {\n            enabled: true,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 17\n            }\n          }, React.createElement(View, {\n            style: styles.SectionStyle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 21\n            }\n          }, React.createElement(TextInput, {\n            style: styles.inputStyle,\n            onChangeText: function onChangeText(username) {\n              return setusername(username);\n            },\n            underlineColorAndroid: \"#f000\",\n            placeholder: \"Enter Name\",\n            placeholderTextColor: \"#8b9cb5\",\n            autoCapitalize: \"sentences\",\n            returnKeyType: \"next\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 25\n            }\n          })), React.createElement(View, {\n            style: styles.SectionStyle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 21\n            }\n          }, React.createElement(TextInput, {\n            style: styles.inputStyle,\n            onChangeText: function onChangeText(useremail) {\n              return setuseremail(useremail);\n            },\n            underlineColorAndroid: \"#f000\",\n            placeholder: \"Enter Email\",\n            placeholderTextColor: \"#8b9cb5\",\n            keyboardType: \"email-address\",\n            ref: emailInputRef,\n            returnKeyType: \"next\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 25\n            }\n          })), React.createElement(View, {\n            style: styles.SectionStyle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 21\n            }\n          }, React.createElement(TextInput, {\n            style: styles.inputStyle,\n            onChangeText: function onChangeText(userpassword) {\n              return setpassword(userpassword);\n            },\n            underlineColorAndroid: \"#f000\",\n            placeholder: \"Enter Password\",\n            placeholderTextColor: \"#8b9cb5\",\n            ref: passwordInputRef,\n            returnKeyType: \"next\",\n            secureTextEntry: true,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 25\n            }\n          })), React.createElement(View, {\n            style: styles.SectionStyle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 21\n            }\n          }, React.createElement(TextInput, {\n            style: styles.inputStyle,\n            onChangeText: function onChangeText(userage) {\n              return setuserage(userage);\n            },\n            underlineColorAndroid: \"#f000\",\n            placeholder: \"Enter Age\",\n            placeholderTextColor: \"#8b9cb5\",\n            keyboardType: \"numeric\",\n            ref: ageInputRef,\n            returnKeyType: \"next\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 25\n            }\n          })), React.createElement(View, {\n            style: styles.SectionStyle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 21\n            }\n          }, React.createElement(TextInput, {\n            style: styles.inputStyle,\n            onChangeText: function onChangeText(useraddress) {\n              return setuseraddress(useraddress);\n            },\n            underlineColorAndroid: \"#f000\",\n            placeholder: \"Enter Address\",\n            placeholderTextColor: \"#8b9cb5\",\n            autoCapitalize: \"sentences\",\n            ref: addressInputRef,\n            returnKeyType: \"next\",\n            blurOnSubmit: false,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 25\n            }\n          })), errortext != '' ? React.createElement(Text, {\n            style: styles.errorTextStyle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 25\n            }\n          }, errortext) : null, React.createElement(TouchableOpacity, {\n            style: styles.buttonStyle,\n            activeOpacity: 0.5,\n            onPress: handleSubmitButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 21\n            }\n          }, React.createElement(Text, {\n            style: styles.buttonTextStyle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 25\n            }\n          }, \"REGISTER\"))))));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Storycreatescreen;\nvar styles = StyleSheet.create({\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#7DE24E',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  },\n  successTextStyle: {\n    color: 'white',\n    textAlign: 'center',\n    fontSize: 18,\n    padding: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/MOBOMEDIA/mobotcmsdemo/Frontendtech/reactnative/story/TechVlog/Screens/storycreate.js"],"names":["React","useState","createRef","Loader","Storycreatescreen","props","username","setusername","useremail","setuseremail","userage","setuserage","useraddress","setuseraddress","password","setpassword","errortext","setErrortext","isRegistraionSuccess","setIsRegistraionSuccess","emailInputRef","ageInputRef","addressInputRef","passwordInputRef","handleSubmitButton","alert","url","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","responseJson","console","log","message","msg","catch","error","flex","backgroundColor","justifyContent","height","resizeMode","alignSelf","styles","successTextStyle","buttonStyle","navigation","navigate","buttonTextStyle","alignContent","alignItems","width","margin","SectionStyle","inputStyle","userpassword","errorTextStyle","StyleSheet","create","flexDirection","marginTop","marginLeft","marginRight","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","padding"],"mappings":"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","sourcesContent":["// import React, { Component, useState } from 'react';\r\n// import {\r\n//     SafeAreaView, StyleSheet,\r\n//     TextInput,\r\n//     View,\r\n//     Text,\r\n//     Image,\r\n//     KeyboardAvoidingView,\r\n//     Keyboard,\r\n//     TouchableOpacity,\r\n//     ScrollView\r\n// } from 'react-native';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n// import Axios from 'axios';\r\n\r\n// export default class Storycreatescreen extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             data: [],\r\n//             profiles: [],\r\n//             title: '',\r\n//             storypara: '',\r\n//             username: '',\r\n//         }\r\n//     }\r\n//     getdata = async () => {\r\n//         try {\r\n//             let users = await AsyncStorage.getItem('userdatas');\r\n//             const userdatas = JSON.parse(users);\r\n//             console.log(userdatas);\r\n//             this.setState({ data: userdatas });\r\n//             const gettoken = this.state.data.token;\r\n//             const getuserid = this.state.data.userid;\r\n//             console.log(gettoken);\r\n//             const geturl = 'http://192.168.1.4:8000/api/getuserdetails/';\r\n//             const config = {\r\n//                 headers: {\r\n//                     'content-type': 'multipart/form-data',\r\n//                     'Authorization': 'Bearer ' + gettoken,\r\n//                     'Accept': 'application/json',\r\n//                 },\r\n\r\n//             };\r\n//             Axios.get(geturl + getuserid, config)\r\n//                 .then(response => {\r\n//                     this.setState({ profiles: response.data.profile });\r\n//                     // console.log(response.data.profile.useremail)\r\n//                 })\r\n//                 .catch(function (error) {\r\n//                     console.log(error);\r\n//                 })\r\n//         } catch (e) {\r\n//             // error reading value\r\n//             console.log(e);\r\n//         }\r\n//     }\r\n//     componentDidMount() {\r\n//         // setTimeout(() => {\r\n//         //   this.setState({favoritecolor: \"yellow\"})\r\n//         // alert('hello*********')\r\n//         this.getdata();\r\n//         // }, 1000)\r\n//     }\r\n//     poststory = () => {\r\n//         //Show Loader\r\n//         // setLoading(true);\r\n//         const url = 'http://192.168.1.4:8000/api/createstory';\r\n//         const  title  = this.state;\r\n//         const storypara  = this.state;\r\n//         const username = this.state.profiles.username;\r\n//         const gettoken = this.state.data.token;\r\n//         console.log(this.state.title);\r\n//         console.log(this.state.storypara);\r\n//         console.log(username);\r\n//         fetch(url, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'content-type': 'multipart/form-data',\r\n//                 'Authorization': 'Bearer ' + gettoken,\r\n//                 'Accept': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 username: username,\r\n//                 // useremail: this.state.profiles.useremail,\r\n//                 title: title,\r\n//                 storypara: storypara\r\n//             })\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((responseJson) => {\r\n//                 //Hide Loader\r\n//                 // setLoading(false);\r\n//                 console.log(responseJson);\r\n//                 if (responseJson.message === 'done') {\r\n//                     setIsRegistraionSuccess(true);\r\n//                     console.log(\r\n//                         'Story posted Successful'\r\n//                     );\r\n//                 } else {\r\n//                     setErrortext(responseJson.msg);\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 //Hide Loader\r\n//                 // setLoading(false);\r\n//                 console.error(error);\r\n//             });\r\n//     };\r\n//     render() {\r\n//         return (\r\n//             <SafeAreaView style={{ flex: 1 }}>\r\n//                 {/* <View style={{ flex: 1 }}> */}\r\n//                 {/* <Loader loading={loading} /> */}\r\n//                 <ScrollView\r\n//                     keyboardShouldPersistTaps=\"handled\"\r\n//                     contentContainerStyle={{\r\n//                         justifyContent: 'center',\r\n//                         alignContent: 'center',\r\n//                     }}>\r\n\r\n//                     <KeyboardAvoidingView enabled>\r\n//                         <View style={styles.SectionStyle}>\r\n//                             <TextInput\r\n//                                 style={styles.hiddenInput}\r\n//                                 underlineColorAndroid=\"#f000\"\r\n//                                 placeholder=\"Enter Name\"\r\n//                                 defaultValue={this.state.profiles.username}\r\n//                                 placeholderTextColor=\"#8b9cb5\"\r\n//                                 autoCapitalize=\"sentences\"\r\n//                                 returnKeyType=\"next\"\r\n//                             />\r\n//                         </View>\r\n//                         {/* <View style={styles.SectionStyle}>\r\n//                                 <TextInput\r\n//                                     style={styles.hiddenInput}\r\n//                                     onChangeText={(useremail) => setuseremail(useremail)}\r\n//                                     underlineColorAndroid=\"#f000\"\r\n//                                     placeholder=\"Enter Email\"\r\n//                                     defaultValue={this.state.profiles.useremail}\r\n//                                     placeholderTextColor=\"#8b9cb5\"\r\n//                                     keyboardType=\"email-address\"\r\n//                                     returnKeyType=\"next\"\r\n//                                 />\r\n//                             </View> */}\r\n//                         <View style={styles.SectionStyle}>\r\n//                             <TextInput\r\n//                                 style={styles.inputStyle}\r\n//                                 onChangeText={title => this.setState({ title })}\r\n//                                 underlineColorAndroid=\"#f000\"\r\n//                                 placeholder=\"Enter story title\"\r\n//                                 placeholderTextColor=\"#8b9cb5\"\r\n//                                 returnKeyType=\"next\"\r\n//                             />\r\n//                         </View>\r\n//                         <View style={styles.SectionStyle}>\r\n//                             <TextInput\r\n//                                 style={styles.inputStyle}\r\n//                                 onChangeText={storypara => this.setState({ storypara })}\r\n//                                 underlineColorAndroid=\"#f000\"\r\n//                                 placeholder=\"Enter content of story\"\r\n//                                 placeholderTextColor=\"#8b9cb5\"\r\n//                                 autoCapitalize=\"sentences\"\r\n//                                 returnKeyType=\"next\"\r\n//                                 blurOnSubmit={false}\r\n//                             />\r\n//                         </View>\r\n//                         {/* {errortext != '' ? (\r\n//                                 <Text style={styles.errorTextStyle}>\r\n//                                     {errortext}\r\n//                                 </Text>\r\n//                             ) : null} */}\r\n//                         <TouchableOpacity\r\n//                             style={styles.buttonStyle}\r\n//                             activeOpacity={0.5} onPress={this.poststory}>\r\n//                             <Text style={styles.buttonTextStyle}>post now</Text>\r\n//                         </TouchableOpacity>\r\n//                     </KeyboardAvoidingView>\r\n//                 </ScrollView>\r\n//                 {/* </View>    \r\n//                         </SafeAreaView> */}\r\n//             </SafeAreaView>\r\n//         )\r\n//     }\r\n\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//     SectionStyle: {\r\n//         flexDirection: 'row',\r\n//         height: 40,\r\n//         marginTop: 20,\r\n//         marginLeft: 35,\r\n//         marginRight: 35,\r\n//         margin: 10,\r\n//     },\r\n//     buttonStyle: {\r\n//         backgroundColor: '#ff4f81',\r\n//         borderWidth: 0,\r\n//         color: '#FFFFFF',\r\n//         borderColor: '#7DE24E',\r\n//         height: 40,\r\n//         alignItems: 'center',\r\n//         borderRadius: 30,\r\n//         marginLeft: 35,\r\n//         marginRight: 35,\r\n//         marginTop: 20,\r\n//         marginBottom: 20,\r\n//     },\r\n//     buttonTextStyle: {\r\n//         color: '#FFFFFF',\r\n//         paddingVertical: 10,\r\n//         fontSize: 16,\r\n//     },\r\n//     inputStyle: {\r\n//         flex: 1,\r\n//         color: 'black',\r\n//         paddingLeft: 15,\r\n//         paddingRight: 15,\r\n//         borderWidth: 1,\r\n//         borderRadius: 30,\r\n//         borderColor: '#dadae8',\r\n//     },\r\n//     errorTextStyle: {\r\n//         color: 'red',\r\n//         textAlign: 'center',\r\n//         fontSize: 14,\r\n//     },\r\n//     successTextStyle: {\r\n//         color: 'white',\r\n//         textAlign: 'center',\r\n//         fontSize: 18,\r\n//         padding: 30,\r\n//     },\r\n//     hiddenInput: {\r\n//         width: 0,\r\n//         height: 0,\r\n//     },\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, createRef } from 'react';\r\nimport {\r\n    StyleSheet,\r\n    TextInput,\r\n    View,\r\n    Text,\r\n    Image,\r\n    KeyboardAvoidingView,\r\n    Keyboard,\r\n    TouchableOpacity,\r\n    ScrollView,\r\n} from 'react-native';\r\n\r\nimport Loader from './loader';\r\n\r\nconst Storycreatescreen = async (props) => {\r\n    const [username, setusername] = useState('');\r\n    const [useremail, setuseremail] = useState('');\r\n    const [userage, setuserage] = useState('');\r\n    const [useraddress, setuseraddress] = useState('');\r\n    const [password, setpassword] = useState('');\r\n    // const [loading, setLoading] = useState(false);\r\n    const [errortext, setErrortext] = useState('');\r\n    const [\r\n        isRegistraionSuccess,\r\n        setIsRegistraionSuccess\r\n    ] = useState(false);\r\n\r\n    const emailInputRef = createRef();\r\n    const ageInputRef = createRef();\r\n    const addressInputRef = createRef();\r\n    const passwordInputRef = createRef();\r\n\r\n    const handleSubmitButton = () => {\r\n        setErrortext('');\r\n        if (!username) {\r\n            alert('Please fill Name');\r\n            return;\r\n        }\r\n        if (!useremail) {\r\n            alert('Please fill Email');\r\n            return;\r\n        }\r\n        if (!userage) {\r\n            alert('Please fill Age');\r\n            return;\r\n        }\r\n        if (!useraddress) {\r\n            alert('Please fill Address');\r\n            return;\r\n        }\r\n        if (!password) {\r\n            alert('Please fill Password');\r\n            return;\r\n        }\r\n        //Show Loader\r\n        // setLoading(true);\r\n        const url = 'http://192.168.1.4:8000/api/createaccount';\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: username,\r\n                useremail: useremail,\r\n                password: password,\r\n                userage: userage,\r\n                useraddress: useraddress,\r\n            })\r\n        })\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                //Hide Loader\r\n                // setLoading(false);\r\n                console.log(responseJson);\r\n                if (responseJson.message === 'success') {\r\n                    setIsRegistraionSuccess(true);\r\n                    console.log(\r\n                        'Registration Successful. Please Login to proceed'\r\n                    );\r\n                } else {\r\n                    setErrortext(responseJson.msg);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //Hide Loader\r\n                // setLoading(false);\r\n                console.error(error);\r\n            });\r\n    };\r\n    if (isRegistraionSuccess) {\r\n        return (\r\n            <View\r\n                style={{\r\n                    flex: 1,\r\n                    backgroundColor: '#307ecc',\r\n                    justifyContent: 'center',\r\n                }}>\r\n                <Image\r\n                    // source={require('../Image/success.png')}\r\n                    style={{\r\n                        height: 150,\r\n                        resizeMode: 'contain',\r\n                        alignSelf: 'center'\r\n                    }}\r\n                />\r\n                <Text style={styles.successTextStyle}>\r\n                    Registration Successful\r\n        </Text>\r\n                <TouchableOpacity\r\n                    style={styles.buttonStyle}\r\n                    activeOpacity={0.5}\r\n                    onPress={() => props.navigation.navigate('LoginScreen')}>\r\n                    <Text style={styles.buttonTextStyle}>Login Now</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        );\r\n    }\r\n    return (\r\n        <View style={{ flex: 1, backgroundColor: '#307ecc' }}>\r\n            {/* <Loader loading={loading} /> */}\r\n            <ScrollView\r\n                keyboardShouldPersistTaps=\"handled\"\r\n                contentContainerStyle={{\r\n                    justifyContent: 'center',\r\n                    alignContent: 'center',\r\n                }}>\r\n                <View style={{ alignItems: 'center' }}>\r\n                    <Image\r\n                        // source={require('../Image/aboutreact.png')}\r\n                        style={{\r\n                            width: '50%',\r\n                            height: 100,\r\n                            resizeMode: 'contain',\r\n                            margin: 30,\r\n                        }}\r\n                    />\r\n                </View>\r\n                <KeyboardAvoidingView enabled>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(username) => setusername(username)}\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Name\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            autoCapitalize=\"sentences\"\r\n                            returnKeyType=\"next\"\r\n                        // onSubmitEditing={() =>\r\n                        //     emailInputRef.current && emailInputRef.current.focus()\r\n                        // }\r\n                        // blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(useremail) => setuseremail(useremail)}\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Email\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            keyboardType=\"email-address\"\r\n                            ref={emailInputRef}\r\n                            returnKeyType=\"next\"\r\n                        // onSubmitEditing={() =>\r\n                        //     passwordInputRef.current &&\r\n                        //     passwordInputRef.current.focus()\r\n                        // }\r\n                        // blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(userpassword) =>\r\n                                setpassword(userpassword)\r\n                            }\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Password\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            ref={passwordInputRef}\r\n                            returnKeyType=\"next\"\r\n                            secureTextEntry={true}\r\n                        // onSubmitEditing={() =>\r\n                        //     ageInputRef.current &&\r\n                        //     ageInputRef.current.focus()\r\n                        // }\r\n                        // blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(userage) => setuserage(userage)}\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Age\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            keyboardType=\"numeric\"\r\n                            ref={ageInputRef}\r\n                            returnKeyType=\"next\"\r\n                        // onSubmitEditing={() =>\r\n                        //     addressInputRef.current &&\r\n                        //     addressInputRef.current.focus()\r\n                        // }\r\n                        // blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(useraddress) =>\r\n                                setuseraddress(useraddress)\r\n                            }\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Address\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            autoCapitalize=\"sentences\"\r\n                            ref={addressInputRef}\r\n                            returnKeyType=\"next\"\r\n                            // onSubmitEditing={Keyboard.dismiss}\r\n                            blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    {errortext != '' ? (\r\n                        <Text style={styles.errorTextStyle}>\r\n                            {errortext}\r\n                        </Text>\r\n                    ) : null}\r\n                    <TouchableOpacity\r\n                        style={styles.buttonStyle}\r\n                        activeOpacity={0.5}\r\n                        onPress={handleSubmitButton}>\r\n                        <Text style={styles.buttonTextStyle}>REGISTER</Text>\r\n                    </TouchableOpacity>\r\n                </KeyboardAvoidingView>\r\n            </ScrollView>\r\n        </View>\r\n    );\r\n};\r\nexport default Storycreatescreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    SectionStyle: {\r\n        flexDirection: 'row',\r\n        height: 40,\r\n        marginTop: 20,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        margin: 10,\r\n    },\r\n    buttonStyle: {\r\n        backgroundColor: '#7DE24E',\r\n        borderWidth: 0,\r\n        color: '#FFFFFF',\r\n        borderColor: '#7DE24E',\r\n        height: 40,\r\n        alignItems: 'center',\r\n        borderRadius: 30,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n    },\r\n    buttonTextStyle: {\r\n        color: '#FFFFFF',\r\n        paddingVertical: 10,\r\n        fontSize: 16,\r\n    },\r\n    inputStyle: {\r\n        flex: 1,\r\n        color: 'white',\r\n        paddingLeft: 15,\r\n        paddingRight: 15,\r\n        borderWidth: 1,\r\n        borderRadius: 30,\r\n        borderColor: '#dadae8',\r\n    },\r\n    errorTextStyle: {\r\n        color: 'red',\r\n        textAlign: 'center',\r\n        fontSize: 14,\r\n    },\r\n    successTextStyle: {\r\n        color: 'white',\r\n        textAlign: 'center',\r\n        fontSize: 18,\r\n        padding: 30,\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}