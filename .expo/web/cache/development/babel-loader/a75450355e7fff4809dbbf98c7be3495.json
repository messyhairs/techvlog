{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\MOBOMEDIA\\\\mobotcmsdemo\\\\Frontendtech\\\\reactnative\\\\story\\\\TechVlog\\\\Screens\\\\registerscreen.js\";\n\nimport React, { useState, createRef, useEffect, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\nimport Loader from \"./loader\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nvar RegisterScreen = function RegisterScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setusername = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      useremail = _useState4[0],\n      setuseremail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userage = _useState6[0],\n      setuserage = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      useraddress = _useState8[0],\n      setuseraddress = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      password = _useState10[0],\n      setpassword = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      role = _useState12[0],\n      setrole = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      contactnumber = _useState14[0],\n      setcontactnumber = _useState14[1];\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      tagline = _useState16[0],\n      settagline = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      noofex = _useState18[0],\n      setnoofex = _useState18[1];\n\n  var _useState19 = useState(''),\n      _useState20 = _slicedToArray(_useState19, 2),\n      errortext = _useState20[0],\n      setErrortext = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      isRegistraionSuccess = _useState22[0],\n      setIsRegistraionSuccess = _useState22[1];\n\n  var emailInputRef = createRef();\n  var ageInputRef = createRef();\n  var addressInputRef = createRef();\n  var passwordInputRef = createRef();\n\n  var _useState23 = useState(''),\n      _useState24 = _slicedToArray(_useState23, 2),\n      expoPushToken = _useState24[0],\n      setExpoPushToken = _useState24[1];\n\n  var _useState25 = useState(false),\n      _useState26 = _slicedToArray(_useState25, 2),\n      notification = _useState26[0],\n      setNotification = _useState26[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      setExpoPushToken(token);\n      console.log('********', token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n\n  function schedulePushNotification() {\n    return _regeneratorRuntime.async(function schedulePushNotification$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n              content: {\n                title: \"You've got mail! ðŸ“¬\",\n                body: 'TechVlog',\n                data: {\n                  data: 'goes here'\n                }\n              },\n              trigger: {\n                seconds: 1\n              }\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function registerForPushNotificationsAsync() {\n    var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context3.next = 22;\n              break;\n            }\n\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n          case 3:\n            _await$Notifications$ = _context3.sent;\n            existingStatus = _await$Notifications$.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== 'granted')) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n          case 9:\n            _await$Notifications$2 = _context3.sent;\n            status = _await$Notifications$2.status;\n            finalStatus = status;\n\n          case 12:\n            if (!(finalStatus !== 'granted')) {\n              _context3.next = 15;\n              break;\n            }\n\n            alert('Failed to get push token for push notification!');\n            return _context3.abrupt(\"return\");\n\n          case 15:\n            _context3.next = 17;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 17:\n            token = _context3.sent.data;\n            console.log(token);\n            console.log(expoPushToken);\n            _context3.next = 23;\n            break;\n\n          case 22:\n            alert('Must use physical device for Push Notifications');\n\n          case 23:\n            if (Platform.OS === 'android') {\n              Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C'\n              });\n            }\n\n            return _context3.abrupt(\"return\", token);\n\n          case 25:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var handleSubmitButton = function handleSubmitButton() {\n    setErrortext('');\n\n    if (!username) {\n      alert('Please fill Name');\n      return;\n    }\n\n    if (!useremail) {\n      alert('Please fill Email');\n      return;\n    }\n\n    if (!userage) {\n      alert('Please fill Age');\n      return;\n    }\n\n    if (!useraddress) {\n      alert('Please fill Address');\n      return;\n    }\n\n    if (!password) {\n      alert('Please fill Password');\n      return;\n    }\n\n    if (!role) {\n      alert('Please fill role');\n      return;\n    }\n\n    if (!tagline) {\n      alert('Please fill tagline');\n      return;\n    }\n\n    if (!noofex) {\n      alert('Please fill noofex');\n      return;\n    }\n\n    if (!contactnumber) {\n      alert('Please fill contactnumber');\n      return;\n    }\n\n    var localurl = 'http://192.168.1.16:8000/api/createaccount';\n    fetch(localurl, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        useremail: useremail,\n        password: password,\n        userage: userage,\n        useraddress: useraddress,\n        role: role,\n        noofex: noofex,\n        contactnumber: contactnumber,\n        tagline: tagline,\n        expoPushToken: expoPushToken\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      console.log(responseJson);\n\n      if (responseJson.message === 'success') {\n        setIsRegistraionSuccess(true);\n        Notifications.scheduleNotificationAsync({\n          content: {\n            title: 'Hello' + ' ' + responseJson.result.username + ' ' + 'welcom to TechVlog',\n            body: 'TechVlog'\n          },\n          trigger: {\n            seconds: 1\n          }\n        });\n        console.log('Registration Successful. Please Login to proceed');\n      } else {\n        setErrortext(responseJson.msg);\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  if (isRegistraionSuccess) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        backgroundColor: '#eeeeee',\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.successTextStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, \"Registration Successful\"), React.createElement(TouchableOpacity, {\n      style: styles.buttonStyle,\n      activeOpacity: 0.5,\n      onPress: function onPress() {\n        return props.navigation.navigate('LoginScreen');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: styles.buttonTextStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }\n    }, \"Login Now\")));\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: '#eeeeee'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    keyboardShouldPersistTaps: \"handled\",\n    contentContainerStyle: {\n      justifyContent: 'center',\n      alignContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    enabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(username) {\n      return setusername(username);\n    },\n    underlineColorAndroid: \"#f000\",\n    placeholder: \"Enter Name\",\n    placeholderTextColor: \"#8b9cb5\",\n    autoCapitalize: \"sentences\",\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 25\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(useremail) {\n      return setuseremail(useremail);\n    },\n    underlineColorAndroid: \"#f000\",\n    placeholder: \"Enter Email\",\n    placeholderTextColor: \"#8b9cb5\",\n    keyboardType: \"email-address\",\n    ref: emailInputRef,\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 25\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(userpassword) {\n      return setpassword(userpassword);\n    },\n    underlineColorAndroid: \"#f000\",\n    placeholder: \"Enter Password\",\n    placeholderTextColor: \"#8b9cb5\",\n    ref: passwordInputRef,\n    returnKeyType: \"next\",\n    secureTextEntry: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 25\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(userage) {\n      return setuserage(userage);\n    },\n    underlineColorAndroid: \"#f000\",\n    placeholder: \"Enter Age\",\n    placeholderTextColor: \"#8b9cb5\",\n    keyboardType: \"numeric\",\n    ref: ageInputRef,\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 25\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(useraddress) {\n      return setuseraddress(useraddress);\n    },\n    underlineColorAndroid: \"#f000\",\n    placeholder: \"Enter Address\",\n    placeholderTextColor: \"#8b9cb5\",\n    autoCapitalize: \"sentences\",\n    ref: addressInputRef,\n    returnKeyType: \"next\",\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 25\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(tagline) {\n      return settagline(tagline);\n    },\n    underlineColorAndroid: \"#f000\",\n    placeholder: \"Tagline\",\n    placeholderTextColor: \"#8b9cb5\",\n    autoCapitalize: \"sentences\",\n    returnKeyType: \"next\",\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 25\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(noofex) {\n      return setnoofex(noofex);\n    },\n    underlineColorAndroid: \"#f000\",\n    placeholder: \"year of experience\",\n    placeholderTextColor: \"#8b9cb5\",\n    autoCapitalize: \"sentences\",\n    keyboardType: \"numeric\",\n    returnKeyType: \"next\",\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 25\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(role) {\n      return setrole(role);\n    },\n    underlineColorAndroid: \"#f000\",\n    placeholder: \"eg: Front end developer\",\n    placeholderTextColor: \"#8b9cb5\",\n    autoCapitalize: \"sentences\",\n    returnKeyType: \"next\",\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 25\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(contactnumber) {\n      return setcontactnumber(contactnumber);\n    },\n    underlineColorAndroid: \"#f000\",\n    placeholder: \"Mobile or phone number\",\n    placeholderTextColor: \"#8b9cb5\",\n    autoCapitalize: \"sentences\",\n    returnKeyType: \"next\",\n    keyboardType: \"numeric\",\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 25\n    }\n  })), errortext != '' ? React.createElement(Text, {\n    style: styles.errorTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 25\n    }\n  }, errortext) : null, React.createElement(TouchableOpacity, {\n    style: styles.buttonStyle,\n    activeOpacity: 0.5,\n    onPress: handleSubmitButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 25\n    }\n  }, \"REGISTER\")))));\n};\n\nexport default RegisterScreen;\nvar styles = StyleSheet.create({\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  hiddenInput: {\n    width: 0,\n    height: 0\n  },\n  buttonStyle: {\n    backgroundColor: '#f6f6f5',\n    borderWidth: 0,\n    color: '#003580',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  buttonTextStyle: {\n    color: '#003580',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: '#444444',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 15,\n    borderColor: '#dadae8'\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  },\n  successTextStyle: {\n    color: '#0d0735',\n    textAlign: 'center',\n    fontSize: 18,\n    padding: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/MOBOMEDIA/mobotcmsdemo/Frontendtech/reactnative/story/TechVlog/Screens/registerscreen.js"],"names":["React","useState","createRef","useEffect","useRef","Notifications","Constants","Loader","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","RegisterScreen","props","username","setusername","useremail","setuseremail","userage","setuserage","useraddress","setuseraddress","password","setpassword","role","setrole","contactnumber","setcontactnumber","tagline","settagline","noofex","setnoofex","errortext","setErrortext","isRegistraionSuccess","setIsRegistraionSuccess","emailInputRef","ageInputRef","addressInputRef","passwordInputRef","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","registerForPushNotificationsAsync","then","token","console","log","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","removeNotificationSubscription","schedulePushNotification","scheduleNotificationAsync","content","title","body","data","trigger","seconds","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","handleSubmitButton","localurl","fetch","method","headers","Accept","JSON","stringify","json","responseJson","message","result","msg","catch","error","flex","backgroundColor","justifyContent","styles","successTextStyle","buttonStyle","navigation","navigate","buttonTextStyle","alignContent","SectionStyle","inputStyle","userpassword","errorTextStyle","StyleSheet","create","flexDirection","height","marginTop","marginLeft","marginRight","margin","hiddenInput","width","borderWidth","color","borderColor","alignItems","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","padding"],"mappings":"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","sourcesContent":["import React, { useState, createRef, useEffect, useRef } from 'react';\r\nimport {\r\n    StyleSheet,\r\n    TextInput,\r\n    View,\r\n    Text,\r\n    Image,\r\n    KeyboardAvoidingView,\r\n    Keyboard,\r\n    TouchableOpacity,\r\n    ScrollView,\r\n    Platform,\r\n    Button\r\n} from 'react-native';\r\nimport * as Notifications from 'expo-notifications';\r\nimport Constants from 'expo-constants';\r\nimport Loader from './loader';\r\nNotifications.setNotificationHandler({\r\n    handleNotification: async () => ({\r\n        shouldShowAlert: true,\r\n        shouldPlaySound: false,\r\n        shouldSetBadge: false,\r\n    }),\r\n});\r\n\r\nconst RegisterScreen = (props) => {\r\n    const [username, setusername] = useState('');\r\n    const [useremail, setuseremail] = useState('');\r\n    const [userage, setuserage] = useState('');\r\n    const [useraddress, setuseraddress] = useState('');\r\n    const [password, setpassword] = useState('');\r\n    const [role, setrole] = useState('');\r\n    const [contactnumber, setcontactnumber] = useState('');\r\n    const [tagline, settagline] = useState('');\r\n    const [noofex, setnoofex] = useState('');\r\n\r\n    // const expotoken = useState('');\r\n    // const [pushnotificationtoken, setpushnotificationtoken] = useState('');\r\n    // const [loading, setLoading] = useState(false);\r\n    const [errortext, setErrortext] = useState('');\r\n    const [\r\n        isRegistraionSuccess,\r\n        setIsRegistraionSuccess\r\n    ] = useState(false);\r\n\r\n    const emailInputRef = createRef();\r\n    const ageInputRef = createRef();\r\n    const addressInputRef = createRef();\r\n    const passwordInputRef = createRef();\r\n    const [expoPushToken, setExpoPushToken] = useState('');\r\n    const [notification, setNotification] = useState(false);\r\n    const notificationListener = useRef();\r\n    const responseListener = useRef();\r\n\r\n\r\n    useEffect(() => {\r\n        registerForPushNotificationsAsync().then(token => {\r\n            setExpoPushToken(token)\r\n            console.log('********', token)\r\n        }\r\n        );\r\n\r\n        notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n            setNotification(notification);\r\n        });\r\n\r\n        responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n            console.log(response);\r\n        });\r\n\r\n        return () => {\r\n            Notifications.removeNotificationSubscription(notificationListener);\r\n            Notifications.removeNotificationSubscription(responseListener);\r\n        };\r\n    }, []);\r\n    async function schedulePushNotification() {\r\n        await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n                title: \"You've got mail! ðŸ“¬\",\r\n                body: 'TechVlog',\r\n                data: { data: 'goes here' },\r\n            },\r\n            trigger: { seconds: 1 },\r\n        });\r\n    }\r\n\r\n    async function registerForPushNotificationsAsync() {\r\n        let token;\r\n        if (Constants.isDevice) {\r\n            const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n            let finalStatus = existingStatus;\r\n            if (existingStatus !== 'granted') {\r\n                const { status } = await Notifications.requestPermissionsAsync();\r\n                finalStatus = status;\r\n            }\r\n            if (finalStatus !== 'granted') {\r\n                alert('Failed to get push token for push notification!');\r\n                return;\r\n            }\r\n            token = (await Notifications.getExpoPushTokenAsync()).data;\r\n            console.log(token);\r\n            console.log(expoPushToken)\r\n        } else {\r\n            alert('Must use physical device for Push Notifications');\r\n        }\r\n\r\n        if (Platform.OS === 'android') {\r\n            Notifications.setNotificationChannelAsync('default', {\r\n                name: 'default',\r\n                importance: Notifications.AndroidImportance.MAX,\r\n                vibrationPattern: [0, 250, 250, 250],\r\n                lightColor: '#FF231F7C',\r\n            });\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n\r\n    const handleSubmitButton = () => {\r\n        // alert(expoPushToken)\r\n        setErrortext('');\r\n        if (!username) {\r\n            alert('Please fill Name');\r\n            return;\r\n        }\r\n        if (!useremail) {\r\n            alert('Please fill Email');\r\n            return;\r\n        }\r\n        if (!userage) {\r\n            alert('Please fill Age');\r\n            return;\r\n        }\r\n        if (!useraddress) {\r\n            alert('Please fill Address');\r\n            return;\r\n        }\r\n        if (!password) {\r\n            alert('Please fill Password');\r\n            return;\r\n        }\r\n        if (!role) {\r\n            alert('Please fill role');\r\n            return;\r\n        }\r\n        if (!tagline) {\r\n            alert('Please fill tagline');\r\n            return;\r\n        }\r\n        if (!noofex) {\r\n            alert('Please fill noofex');\r\n            return;\r\n        }\r\n        if (!contactnumber) {\r\n            alert('Please fill contactnumber');\r\n            return;\r\n        }\r\n        //Show Loader\r\n        // setLoading(true);\r\n        // const url = 'http://172.26.240.1:8000/api/createaccount';\r\n        const localurl = 'http://192.168.1.16:8000/api/createaccount';\r\n        // const localurl = 'http://localhost:8000/api/createaccount';\r\n\r\n        fetch(localurl, {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: username,\r\n                useremail: useremail,\r\n                password: password,\r\n                userage: userage,\r\n                useraddress: useraddress,\r\n                role: role,\r\n                noofex: noofex,\r\n                contactnumber: contactnumber,\r\n                tagline: tagline,\r\n                expoPushToken: expoPushToken\r\n            })\r\n        })\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                //Hide Loader\r\n                // setLoading(false);\r\n                console.log(responseJson);\r\n                if (responseJson.message === 'success') {\r\n                    setIsRegistraionSuccess(true);\r\n                    Notifications.scheduleNotificationAsync({\r\n                        content: {\r\n                            // title: responseJson.message,\r\n                            title: 'Hello' + ' ' + responseJson.result.username + ' ' + 'welcom to TechVlog',\r\n                            body: 'TechVlog',\r\n                            // data: { data: 'goes here' },\r\n                            // data: 'Hello' + ' ' + responseJson.result.username + ' ' + 'welcom to TechVlog'\r\n                        },\r\n                        trigger: { seconds: 1 },\r\n                    });\r\n                    console.log(\r\n                        'Registration Successful. Please Login to proceed'\r\n                    );\r\n                } else {\r\n                    setErrortext(responseJson.msg);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //Hide Loader\r\n                // setLoading(false);\r\n                console.error(error);\r\n            });\r\n    };\r\n    if (isRegistraionSuccess) {\r\n        // schedulePushNotification();\r\n        return (\r\n            <View\r\n                style={{\r\n                    flex: 1,\r\n                    backgroundColor: '#eeeeee',\r\n                    justifyContent: 'center',\r\n                }}>\r\n                <Text style={styles.successTextStyle}>\r\n                    Registration Successful\r\n        </Text>\r\n                <TouchableOpacity\r\n                    style={styles.buttonStyle}\r\n                    activeOpacity={0.5}\r\n                    onPress={() => props.navigation.navigate('LoginScreen')}>\r\n                    <Text style={styles.buttonTextStyle}>Login Now</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        );\r\n    }\r\n    return (\r\n        <View style={{ flex: 1, backgroundColor: '#eeeeee' }}>\r\n            {/* <Loader loading={loading} /> */}\r\n            <ScrollView\r\n                keyboardShouldPersistTaps=\"handled\"\r\n                contentContainerStyle={{\r\n                    justifyContent: 'center',\r\n                    alignContent: 'center',\r\n                }}>\r\n                {/* <View style={{ alignItems: 'center' }}>\r\n                    <Image\r\n                        // source={require('../Image/aboutreact.png')}\r\n                        style={{\r\n                            width: '50%',\r\n                            height: 100,\r\n                            resizeMode: 'contain',\r\n                            margin: 30,\r\n                        }}\r\n                    />\r\n                </View> */}\r\n                <KeyboardAvoidingView enabled>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(username) => setusername(username)}\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Name\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            autoCapitalize=\"sentences\"\r\n                            returnKeyType=\"next\"\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(useremail) => setuseremail(useremail)}\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Email\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            keyboardType=\"email-address\"\r\n                            ref={emailInputRef}\r\n                            returnKeyType=\"next\"\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(userpassword) =>\r\n                                setpassword(userpassword)\r\n                            }\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Password\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            ref={passwordInputRef}\r\n                            returnKeyType=\"next\"\r\n                            secureTextEntry={true}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(userage) => setuserage(userage)}\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Age\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            keyboardType=\"numeric\"\r\n                            ref={ageInputRef}\r\n                            returnKeyType=\"next\"\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(useraddress) =>\r\n                                setuseraddress(useraddress)\r\n                            }\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Enter Address\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            autoCapitalize=\"sentences\"\r\n                            ref={addressInputRef}\r\n                            returnKeyType=\"next\"\r\n                            blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(tagline) =>\r\n                                settagline(tagline)\r\n                            }\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Tagline\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            autoCapitalize=\"sentences\"\r\n                            returnKeyType=\"next\"\r\n                            blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(noofex) =>\r\n                                setnoofex(noofex)\r\n                            }\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"year of experience\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            autoCapitalize=\"sentences\"\r\n                            keyboardType=\"numeric\"\r\n                            returnKeyType=\"next\"\r\n                            blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(role) =>\r\n                                setrole(role)\r\n                            }\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"eg: Front end developer\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            autoCapitalize=\"sentences\"\r\n                            returnKeyType=\"next\"\r\n                            blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.SectionStyle}>\r\n                        <TextInput\r\n                            style={styles.inputStyle}\r\n                            onChangeText={(contactnumber) =>\r\n                                setcontactnumber(contactnumber)\r\n                            }\r\n                            underlineColorAndroid=\"#f000\"\r\n                            placeholder=\"Mobile or phone number\"\r\n                            placeholderTextColor=\"#8b9cb5\"\r\n                            autoCapitalize=\"sentences\"\r\n                            returnKeyType=\"next\"\r\n                            keyboardType=\"numeric\"\r\n                            blurOnSubmit={false}\r\n                        />\r\n                    </View>\r\n                    {errortext != '' ? (\r\n                        <Text style={styles.errorTextStyle}>\r\n                            {errortext}\r\n                        </Text>\r\n                    ) : null}\r\n                    <TouchableOpacity\r\n                        style={styles.buttonStyle}\r\n                        activeOpacity={0.5}\r\n                        onPress={handleSubmitButton}>\r\n                        <Text style={styles.buttonTextStyle}>REGISTER</Text>\r\n                    </TouchableOpacity>\r\n                </KeyboardAvoidingView>\r\n                {/* <Text>Your expo push token: {expoPushToken}</Text>\r\n                <View style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n                    <Text>Title: {notification && notification.request.content.title} </Text>\r\n                    <Text>Body: {notification && notification.request.content.body}</Text>\r\n                    <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\r\n                </View>\r\n                <Button\r\n                    title=\"Press to schedule a notification\"\r\n                    onPress={async () => {\r\n                        await schedulePushNotification();\r\n                    }}\r\n                /> */}\r\n            </ScrollView>\r\n        </View >\r\n    );\r\n\r\n}\r\n\r\nexport default RegisterScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    SectionStyle: {\r\n        flexDirection: 'row',\r\n        height: 40,\r\n        marginTop: 20,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        margin: 10,\r\n    },\r\n    hiddenInput: {\r\n        width: 0,\r\n        height: 0,\r\n    },\r\n    buttonStyle: {\r\n        backgroundColor: '#f6f6f5',\r\n        borderWidth: 0,\r\n        color: '#003580',\r\n        borderColor: '#7DE24E',\r\n        height: 40,\r\n        alignItems: 'center',\r\n        borderRadius: 30,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n    },\r\n    buttonTextStyle: {\r\n        color: '#003580',\r\n        paddingVertical: 10,\r\n        fontSize: 16,\r\n    },\r\n    inputStyle: {\r\n        flex: 1,\r\n        color: '#444444',\r\n        paddingLeft: 15,\r\n        paddingRight: 15,\r\n        borderWidth: 1,\r\n        borderRadius: 15,\r\n        borderColor: '#dadae8',\r\n    },\r\n    errorTextStyle: {\r\n        color: 'red',\r\n        textAlign: 'center',\r\n        fontSize: 14,\r\n    },\r\n    successTextStyle: {\r\n        color: '#0d0735',\r\n        textAlign: 'center',\r\n        fontSize: 18,\r\n        padding: 30,\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}