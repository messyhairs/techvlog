{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\MOBOMEDIA\\\\mobotcmsdemo\\\\Frontendtech\\\\reactnative\\\\story\\\\TechVlog\\\\Screens\\\\editscreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport Axios from 'axios';\nimport { Card, ListItem, Button, Icon } from 'react-native-elements';\nimport { getbannerdata } from \"./viewyourstory\";\n\nvar EditScreen = function (_React$Component) {\n  _inherits(EditScreen, _React$Component);\n\n  var _super = _createSuper(EditScreen);\n\n  function EditScreen(props) {\n    var _this;\n\n    _classCallCheck(this, EditScreen);\n\n    _this = _super.call(this, props);\n\n    _this.getcurrentstories = function _callee() {\n      var stories, story;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('currentstory'));\n\n            case 3:\n              stories = _context.sent;\n              story = JSON.parse(stories);\n              console.log(story);\n\n              _this.setState({\n                data: story\n              });\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    };\n\n    _this.updatestories = function _callee2() {\n      var users, userdatas, gettoken, getuserid, stories, story, stories_id, username, useremail, title, storypara, config, url;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userdatas'));\n\n            case 3:\n              users = _context2.sent;\n              userdatas = JSON.parse(users);\n              console.log(userdatas);\n              gettoken = userdatas.token;\n              getuserid = userdatas.userid;\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('currentstory'));\n\n            case 10:\n              stories = _context2.sent;\n              story = JSON.parse(stories);\n              console.log(story.stories_id);\n              stories_id = story.stories_id;\n              username = story.username;\n              useremail = story.useremail;\n              title = story.title;\n              storypara = story.storycontent;\n              config = {\n                headers: {\n                  'content-type': 'multipart/form-data',\n                  'Authorization': 'Bearer ' + gettoken,\n                  'Accept': 'application/json'\n                }\n              };\n              url = 'http://192.168.1.4:8000/api/storiesupdate';\n              _context2.next = 25;\n              break;\n\n            case 22:\n              _context2.prev = 22;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 25:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 22]], Promise);\n    };\n\n    _this.state = {\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(EditScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getcurrentstories();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(SafeAreaView, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }, React.createElement(ScrollView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }\n      }, \"Story details\")), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.storytitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, \"Title\"), React.createElement(TextInput, {\n        style: styles.titleanswer,\n        defaultValue: this.setState.data.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }\n      })), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.contenthead,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, \"Content\"), React.createElement(Text, {\n        style: styles.contentanswer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }\n      }, this.state.data.storycontent)), React.createElement(Text, {\n        onPress: this.updatestories,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, \"update\")));\n    }\n  }]);\n\n  return EditScreen;\n}(React.Component);\n\nexport { EditScreen as default };\nvar styles = StyleSheet.create({\n  storycontentbottomview: {\n    paddingBottom: 50\n  },\n  mainBody: {\n    paddingBottom: 50\n  },\n  storytitle: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    paddingBottom: 15\n  },\n  titleanswer: {\n    color: '#003666',\n    textAlign: 'center'\n  },\n  contenthead: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    paddingBottom: 15\n  },\n  contentanswer: {\n    color: '#136ad5',\n    textAlign: 'justify',\n    paddingLeft: 5,\n    paddingRight: 5\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/MOBOMEDIA/mobotcmsdemo/Frontendtech/reactnative/story/TechVlog/Screens/editscreen.js"],"names":["React","Component","useState","AsyncStorage","Axios","Card","ListItem","Button","Icon","getbannerdata","EditScreen","props","getcurrentstories","getItem","stories","story","JSON","parse","console","log","setState","data","updatestories","users","userdatas","gettoken","token","getuserid","userid","stories_id","username","useremail","title","storypara","storycontent","config","headers","url","state","flex","styles","storytitle","titleanswer","contenthead","contentanswer","StyleSheet","create","storycontentbottomview","paddingBottom","mainBody","textAlign","fontWeight","color","paddingLeft","paddingRight"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,IAAjC,QAA6C,uBAA7C;AACA,SAASC,aAAT;;IAEqBC,U;;;;;AAEjB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAMnBC,iBANmB,GAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEQT,YAAY,CAACU,OAAb,CAAqB,cAArB,CAFR;;AAAA;AAERC,cAAAA,OAFQ;AAGNC,cAAAA,KAHM,GAGEC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAHF;AAIZI,cAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;AACA,oBAAKK,QAAL,CAAc;AAAEC,gBAAAA,IAAI,EAAEN;AAAR,eAAd;;AALY;AAAA;;AAAA;AAAA;AAAA;AAQZG,cAAAA,OAAO,CAACC,GAAR;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAND;;AAAA,UAoBnBG,aApBmB,GAoBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAGUnB,YAAY,CAACU,OAAb,CAAqB,WAArB,CAHV;;AAAA;AAGJU,cAAAA,KAHI;AAIFC,cAAAA,SAJE,GAIUR,IAAI,CAACC,KAAL,CAAWM,KAAX,CAJV;AAKRL,cAAAA,OAAO,CAACC,GAAR,CAAYK,SAAZ;AAEMC,cAAAA,QAPE,GAOSD,SAAS,CAACE,KAPnB;AAQFC,cAAAA,SARE,GAQUH,SAAS,CAACI,MARpB;AAAA;AAAA,+CASYzB,YAAY,CAACU,OAAb,CAAqB,cAArB,CATZ;;AAAA;AASJC,cAAAA,OATI;AAUFC,cAAAA,KAVE,GAUMC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAVN;AAWRI,cAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACc,UAAlB;AACMA,cAAAA,UAZE,GAYWd,KAAK,CAACc,UAZjB;AAaFC,cAAAA,QAbE,GAaSf,KAAK,CAACe,QAbf;AAcFC,cAAAA,SAdE,GAcUhB,KAAK,CAACgB,SAdhB;AAeFC,cAAAA,KAfE,GAeMjB,KAAK,CAACiB,KAfZ;AAgBFC,cAAAA,SAhBE,GAgBUlB,KAAK,CAACmB,YAhBhB;AAiBFC,cAAAA,MAjBE,GAiBO;AACXC,gBAAAA,OAAO,EAAE;AACL,kCAAgB,qBADX;AAEL,mCAAiB,YAAYX,QAFxB;AAGL,4BAAU;AAHL;AADE,eAjBP;AAyBFY,cAAAA,GAzBE,GAyBI,2CAzBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0CRnB,cAAAA,OAAO,CAACC,GAAR;;AA1CQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApBG;;AAEf,UAAKmB,KAAL,GAAa;AACTjB,MAAAA,IAAI,EAAE;AADG,KAAb;AAFe;AAKlB;;;;WAYD,6BAAoB;AAChB,WAAKT,iBAAL;AACH;;;WA8CD,kBAAS;AAIL,aACI,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAE;AAAE2B,UAAAA,IAAI,EAAE;AAAR,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,CADJ,EAII,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAGI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAED,MAAM,CAACE,WAAzB;AAAsC,QAAA,YAAY,EAAE,KAAKtB,QAAL,CAAcC,IAAd,CAAmBW,KAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CAJJ,EASI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEQ,MAAM,CAACG,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACI,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoC,KAAKN,KAAL,CAAWjB,IAAX,CAAgBa,YAApD,CAFJ,CATJ,EAaI,oBAAC,IAAD;AAAM,QAAA,OAAO,EAAE,KAAKZ,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbJ,CADJ,CADJ;AAmBH;;;;EA1FmCtB,KAAK,CAACC,S;;SAAzBS,U;AA8FrB,IAAM8B,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,sBAAsB,EAAE;AACpBC,IAAAA,aAAa,EAAE;AADK,GADK;AAI7BC,EAAAA,QAAQ,EAAE;AACND,IAAAA,aAAa,EAAE;AADT,GAJmB;AAO7BP,EAAAA,UAAU,EAAE;AACRS,IAAAA,SAAS,EAAE,QADH;AAERC,IAAAA,UAAU,EAAC,MAFH;AAGRH,IAAAA,aAAa,EAAE;AAHP,GAPiB;AAY7BN,EAAAA,WAAW,EAAE;AACTU,IAAAA,KAAK,EAAC,SADG;AAETF,IAAAA,SAAS,EAAE;AAFF,GAZgB;AAgB7BP,EAAAA,WAAW,EAAE;AACTO,IAAAA,SAAS,EAAE,QADF;AAETC,IAAAA,UAAU,EAAC,MAFF;AAGTH,IAAAA,aAAa,EAAE;AAHN,GAhBgB;AAqB7BJ,EAAAA,aAAa,EAAE;AACXQ,IAAAA,KAAK,EAAC,SADK;AAEXF,IAAAA,SAAS,EAAE,SAFA;AAGXG,IAAAA,WAAW,EAAE,CAHF;AAIXC,IAAAA,YAAY,EAAE;AAJH;AArBc,CAAlB,CAAf","sourcesContent":["import React, { Component, useState } from 'react';\r\nimport { View, Text, SafeAreaView, StyleSheet, ScrollView, TextInput } from 'react-native';\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\nimport Axios from 'axios';\r\nimport { Card, ListItem, Button, Icon } from 'react-native-elements';\r\nimport { getbannerdata } from './viewyourstory'\r\n\r\nexport default class EditScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n    getcurrentstories = async () => {\r\n        try {\r\n            let stories = await AsyncStorage.getItem('currentstory');\r\n            const story = JSON.parse(stories);\r\n            console.log(story);\r\n            this.setState({ data: story });\r\n        } catch (e) {\r\n            // error reading value\r\n            console.log(e);\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getcurrentstories();\r\n    }\r\n    updatestories = async () => {\r\n        // setErrortext('');\r\n        try {\r\n            let users = await AsyncStorage.getItem('userdatas');\r\n            const userdatas = JSON.parse(users);\r\n            console.log(userdatas);\r\n            // this.setState({ data: userdatas });\r\n            const gettoken = userdatas.token;\r\n            const getuserid = userdatas.userid;\r\n            let stories = await AsyncStorage.getItem('currentstory');\r\n            const story = JSON.parse(stories);\r\n            console.log(story.stories_id)\r\n            const stories_id = story.stories_id;\r\n            const username = story.username;\r\n            const useremail = story.useremail;\r\n            const title = story.title;\r\n            const storypara = story.storycontent;\r\n            const config = {\r\n                headers: {\r\n                    'content-type': 'multipart/form-data',\r\n                    'Authorization': 'Bearer ' + gettoken,\r\n                    'Accept': 'application/json',\r\n                },\r\n\r\n            }; \r\n            const url = 'http://192.168.1.4:8000/api/storiesupdate';\r\n            // fetch(url+storyid,config, {\r\n            //     method: 'POST',\r\n            //     // headers: {\r\n            //     //     Accept: 'application/json',\r\n            //     //     'Content-Type': 'application/json',\r\n            //     //     'Authorization': 'Bearer ' + gettoken\r\n            //     // },\r\n            //     body: JSON.stringify({\r\n            //         username: response.data.profile.username,\r\n            //         useremail: response.data.profile.useremail,\r\n            //         title: title,\r\n            //         storypara: storypara,\r\n            //     })\r\n            // })\r\n        } catch (e) {\r\n            // error reading value\r\n            console.log(e);\r\n        }\r\n    }\r\n    render() {\r\n        // getbannerdata().then(res => {\r\n        //     console.log(res);\r\n        // })\r\n        return (\r\n            <SafeAreaView style={{ flex: 1 }}>\r\n                <ScrollView>\r\n                    <View>\r\n                        <Text>Story details</Text>\r\n                    </View>\r\n                    <View>\r\n                        <Text style={styles.storytitle}>Title</Text>\r\n                        {/* <Text style={styles.titleanswer}>{this.state.data.title}</Text> */}\r\n                        <TextInput style={styles.titleanswer} defaultValue={this.setState.data.title} />\r\n                    </View>\r\n                    <View>\r\n                        <Text style={styles.contenthead}>Content</Text>\r\n                        <Text style={styles.contentanswer}>{this.state.data.storycontent}</Text>\r\n                    </View>\r\n                    <Text onPress={this.updatestories}>update</Text>\r\n                </ScrollView>\r\n            </SafeAreaView>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    storycontentbottomview: {\r\n        paddingBottom: 50,\r\n    },\r\n    mainBody: {\r\n        paddingBottom: 50\r\n    },\r\n    storytitle: {\r\n        textAlign: 'center',\r\n        fontWeight:'bold',\r\n        paddingBottom: 15\r\n    },\r\n    titleanswer: {\r\n        color:'#003666',\r\n        textAlign: 'center',\r\n    },\r\n    contenthead: {\r\n        textAlign: 'center',\r\n        fontWeight:'bold',\r\n        paddingBottom: 15\r\n    },\r\n    contentanswer: {\r\n        color:'#136ad5',\r\n        textAlign: 'justify',\r\n        paddingLeft: 5,\r\n        paddingRight: 5\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}