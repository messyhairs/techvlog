{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\MOBOMEDIA\\\\mobotcmsdemo\\\\Frontendtech\\\\reactnative\\\\story\\\\TechVlog\\\\Screens\\\\loginscreen.js\";\n\nimport React, { useState, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport Loader from \"./loader\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      useremail = _useState2[0],\n      setuseremail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setpassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errortext = _useState6[0],\n      setErrortext = _useState6[1];\n\n  var passwordInputRef = createRef();\n\n  var handleSubmitPress = function handleSubmitPress() {\n    setErrortext('');\n\n    if (!useremail) {\n      alert('Please fill Email');\n      return;\n    }\n\n    if (!password) {\n      alert('Please fill Password');\n      return;\n    }\n\n    setLoading(true);\n    var dataToSend = {\n      useremail: useremail,\n      password: password\n    };\n    var formBody = [];\n\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n\n    formBody = formBody.join('&');\n    var url = ' http://localhost:8000/api/login';\n    fetch(url, {\n      method: 'POST',\n      body: formBody,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      console.log(responseJson);\n\n      if (responseJson.status === 'success') {\n        AsyncStorage.setItem('user_id', responseJson.data.email);\n        console.log(responseJson.data.email);\n        navigation.replace('DrawerNavigationRoutes');\n      } else {\n        setErrortext(responseJson.msg);\n        console.log('Please check your email id or password');\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.mainBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    keyboardShouldPersistTaps: \"handled\",\n    contentContainerStyle: {\n      flex: 1,\n      justifyContent: 'center',\n      alignContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    enabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }, React.createElement(Image, {\n    style: {\n      width: '50%',\n      height: 100,\n      resizeMode: 'contain',\n      margin: 30\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 29\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(useremail) {\n      return setUserEmail(useremail);\n    },\n    placeholder: \"Enter Email\",\n    placeholderTextColor: \"#8b9cb5\",\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    returnKeyType: \"next\",\n    onSubmitEditing: function onSubmitEditing() {\n      return passwordInputRef.current && passwordInputRef.current.focus();\n    },\n    underlineColorAndroid: \"#f000\",\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 29\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 25\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(password) {\n      return setUserPassword(password);\n    },\n    placeholder: \"Enter Password\",\n    placeholderTextColor: \"#8b9cb5\",\n    keyboardType: \"default\",\n    ref: passwordInputRef,\n    onSubmitEditing: Keyboard.dismiss,\n    blurOnSubmit: false,\n    secureTextEntry: true,\n    underlineColorAndroid: \"#f000\",\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 29\n    }\n  })), errortext != '' ? React.createElement(Text, {\n    style: styles.errorTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    }\n  }, errortext) : null, React.createElement(TouchableOpacity, {\n    style: styles.buttonStyle,\n    activeOpacity: 0.5,\n    onPress: handleSubmitPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 29\n    }\n  }, \"LOGIN\")), React.createElement(Text, {\n    style: styles.registerTextStyle,\n    onPress: function onPress() {\n      return navigation.navigate('RegisterScreen');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 25\n    }\n  }, \"New Here ? Register\")))));\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#307ecc',\n    alignContent: 'center'\n  },\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#7DE24E',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 25\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  registerTextStyle: {\n    color: '#FFFFFF',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 14,\n    alignSelf: 'center',\n    padding: 10\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/MOBOMEDIA/mobotcmsdemo/Frontendtech/reactnative/story/TechVlog/Screens/loginscreen.js"],"names":["React","useState","createRef","AsyncStorage","Loader","LoginScreen","navigation","useremail","setuseremail","password","setpassword","errortext","setErrortext","passwordInputRef","handleSubmitPress","alert","setLoading","dataToSend","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","url","fetch","method","body","headers","then","response","json","responseJson","console","log","status","setItem","data","email","replace","msg","catch","error","styles","mainBody","flex","justifyContent","alignContent","alignItems","width","height","resizeMode","margin","SectionStyle","inputStyle","setUserEmail","current","focus","setUserPassword","Keyboard","dismiss","errorTextStyle","buttonStyle","buttonTextStyle","registerTextStyle","navigate","StyleSheet","create","backgroundColor","flexDirection","marginTop","marginLeft","marginRight","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","fontWeight","alignSelf","padding"],"mappings":"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","sourcesContent":["import React, { useState, createRef } from 'react';\r\nimport {\r\n    StyleSheet,\r\n    TextInput,\r\n    View,\r\n    Text,\r\n    ScrollView,\r\n    Image,\r\n    Keyboard,\r\n    TouchableOpacity,\r\n    KeyboardAvoidingView,\r\n} from 'react-native';\r\n\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\n\r\nimport Loader from './loader';\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n    const [useremail, setuseremail] = useState('');\r\n    const [password, setpassword] = useState('');\r\n    // const [loading, setLoading] = useState(false);\r\n    const [errortext, setErrortext] = useState('');\r\n\r\n    const passwordInputRef = createRef();\r\n\r\n    const handleSubmitPress = () => {\r\n        setErrortext('');\r\n        if (!useremail) {\r\n            alert('Please fill Email');\r\n            return;\r\n        }\r\n        if (!password) {\r\n            alert('Please fill Password');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        let dataToSend = { useremail: useremail, password: password };\r\n        let formBody = [];\r\n        for (let key in dataToSend) {\r\n            let encodedKey = encodeURIComponent(key);\r\n            let encodedValue = encodeURIComponent(dataToSend[key]);\r\n            formBody.push(encodedKey + '=' + encodedValue);\r\n        }\r\n        formBody = formBody.join('&');\r\n        const url = ' http://localhost:8000/api/login'\r\n\r\n        // fetch('http://localhost:3000/api/user/login', {\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: formBody,\r\n            headers: {\r\n                //Header Defination\r\n                'Content-Type':\r\n                    'application/x-www-form-urlencoded;charset=UTF-8',\r\n            },\r\n        })\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                //Hide Loader\r\n                // setLoading(false);\r\n                console.log(responseJson);\r\n                // If server response message same as Data Matched\r\n                if (responseJson.status === 'success') {\r\n                    AsyncStorage.setItem('user_id', responseJson.data.email);\r\n                    console.log(responseJson.data.email);\r\n                    navigation.replace('DrawerNavigationRoutes');\r\n                } else {\r\n                    setErrortext(responseJson.msg);\r\n                    console.log('Please check your email id or password');\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //Hide Loader\r\n                // setLoading(false);\r\n                console.error(error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <View style={styles.mainBody}>\r\n            {/* <Loader loading={loading} /> */}\r\n            <ScrollView\r\n                keyboardShouldPersistTaps=\"handled\"\r\n                contentContainerStyle={{\r\n                    flex: 1,\r\n                    justifyContent: 'center',\r\n                    alignContent: 'center',\r\n                }}>\r\n                <View>\r\n                    <KeyboardAvoidingView enabled>\r\n                        <View style={{ alignItems: 'center' }}>\r\n                            <Image\r\n                                // source={require('../Image/aboutreact.png')}\r\n                                style={{\r\n                                    width: '50%',\r\n                                    height: 100,\r\n                                    resizeMode: 'contain',\r\n                                    margin: 30,\r\n                                }}\r\n                            />\r\n                        </View>\r\n                        <View style={styles.SectionStyle}>\r\n                            <TextInput\r\n                                style={styles.inputStyle}\r\n                                onChangeText={(useremail) =>\r\n                                    setUserEmail(useremail)\r\n                                }\r\n                                placeholder=\"Enter Email\" //dummy@abc.com\r\n                                placeholderTextColor=\"#8b9cb5\"\r\n                                autoCapitalize=\"none\"\r\n                                keyboardType=\"email-address\"\r\n                                returnKeyType=\"next\"\r\n                                onSubmitEditing={() =>\r\n                                    passwordInputRef.current &&\r\n                                    passwordInputRef.current.focus()\r\n                                }\r\n                                underlineColorAndroid=\"#f000\"\r\n                                blurOnSubmit={false}\r\n                            />\r\n                        </View>\r\n                        <View style={styles.SectionStyle}>\r\n                            <TextInput\r\n                                style={styles.inputStyle}\r\n                                onChangeText={(password) =>\r\n                                    setUserPassword(password)\r\n                                }\r\n                                placeholder=\"Enter Password\" //12345\r\n                                placeholderTextColor=\"#8b9cb5\"\r\n                                keyboardType=\"default\"\r\n                                ref={passwordInputRef}\r\n                                onSubmitEditing={Keyboard.dismiss}\r\n                                blurOnSubmit={false}\r\n                                secureTextEntry={true}\r\n                                underlineColorAndroid=\"#f000\"\r\n                                returnKeyType=\"next\"\r\n                            />\r\n                        </View>\r\n                        {errortext != '' ? (\r\n                            <Text style={styles.errorTextStyle}>\r\n                                {errortext}\r\n                            </Text>\r\n                        ) : null}\r\n                        <TouchableOpacity\r\n                            style={styles.buttonStyle}\r\n                            activeOpacity={0.5}\r\n                            onPress={handleSubmitPress}>\r\n                            <Text style={styles.buttonTextStyle}>LOGIN</Text>\r\n                        </TouchableOpacity>\r\n                        <Text\r\n                            style={styles.registerTextStyle}\r\n                            onPress={() => navigation.navigate('RegisterScreen')}>\r\n                            New Here ? Register\r\n            </Text>\r\n                    </KeyboardAvoidingView>\r\n                </View>\r\n            </ScrollView>\r\n        </View>\r\n    );\r\n};\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    mainBody: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        backgroundColor: '#307ecc',\r\n        alignContent: 'center',\r\n    },\r\n    SectionStyle: {\r\n        flexDirection: 'row',\r\n        height: 40,\r\n        marginTop: 20,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        margin: 10,\r\n    },\r\n    buttonStyle: {\r\n        backgroundColor: '#7DE24E',\r\n        borderWidth: 0,\r\n        color: '#FFFFFF',\r\n        borderColor: '#7DE24E',\r\n        height: 40,\r\n        alignItems: 'center',\r\n        borderRadius: 30,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        marginTop: 20,\r\n        marginBottom: 25,\r\n    },\r\n    buttonTextStyle: {\r\n        color: '#FFFFFF',\r\n        paddingVertical: 10,\r\n        fontSize: 16,\r\n    },\r\n    inputStyle: {\r\n        flex: 1,\r\n        color: 'white',\r\n        paddingLeft: 15,\r\n        paddingRight: 15,\r\n        borderWidth: 1,\r\n        borderRadius: 30,\r\n        borderColor: '#dadae8',\r\n    },\r\n    registerTextStyle: {\r\n        color: '#FFFFFF',\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 14,\r\n        alignSelf: 'center',\r\n        padding: 10,\r\n    },\r\n    errorTextStyle: {\r\n        color: 'red',\r\n        textAlign: 'center',\r\n        fontSize: 14,\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}