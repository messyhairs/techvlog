{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\MOBOMEDIA\\\\mobotcmsdemo\\\\Frontendtech\\\\reactnative\\\\story\\\\TechVlog\\\\Screens\\\\loginscreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState, createRef, Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport Loader from \"./loader\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.LoginScreen = function (_ref) {\n      var navigation = _ref.navigation;\n\n      var _useState = useState(''),\n          _useState2 = _slicedToArray(_useState, 2),\n          useremail = _useState2[0],\n          setuseremail = _useState2[1];\n\n      var _useState3 = useState(''),\n          _useState4 = _slicedToArray(_useState3, 2),\n          password = _useState4[0],\n          setpassword = _useState4[1];\n\n      var _useState5 = useState(''),\n          _useState6 = _slicedToArray(_useState5, 2),\n          errortext = _useState6[0],\n          setErrortext = _useState6[1];\n\n      var passwordInputRef = createRef();\n\n      var handleSubmitPress = function handleSubmitPress() {\n        setErrortext('');\n\n        if (!useremail) {\n          alert('Please fill Email');\n          return;\n        }\n\n        if (!password) {\n          alert('Please fill Password');\n          return;\n        }\n\n        var dataToSend = {\n          useremail: useremail,\n          password: password\n        };\n        var formBody = [];\n\n        for (var key in dataToSend) {\n          var encodedKey = encodeURIComponent(key);\n          var encodedValue = encodeURIComponent(dataToSend[key]);\n          formBody.push(encodedKey + '=' + encodedValue);\n        }\n\n        formBody = formBody.join('&');\n        var url = 'http://192.168.1.4:8000/api/login';\n        fetch(url, {\n          method: 'POST',\n          body: formBody,\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (responseJson) {\n          console.log(responseJson);\n\n          if (responseJson.message === 'success') {\n            AsyncStorage.setItem('user_id', responseJson.userid);\n            navigation.replace('DrawerNavigationRoutes', {\n              responseJson: responseJson\n            });\n          } else {\n            setErrortext(responseJson.message);\n            console.log(responseJson.message);\n          }\n        }).catch(function (error) {\n          console.error(error);\n        });\n      };\n\n      return React.createElement(View, {\n        style: styles.mainBody,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      }, React.createElement(ScrollView, {\n        keyboardShouldPersistTaps: \"handled\",\n        contentContainerStyle: {\n          flex: 1,\n          justifyContent: 'center',\n          alignContent: 'center'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, React.createElement(KeyboardAvoidingView, {\n        enabled: true,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, React.createElement(View, {\n        style: {\n          alignItems: 'center'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }\n      }, React.createElement(Image, {\n        style: {\n          width: '50%',\n          height: 100,\n          resizeMode: 'contain',\n          margin: 30\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }\n      })), React.createElement(View, {\n        style: styles.SectionStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }\n      }, React.createElement(TextInput, {\n        style: styles.inputStyle,\n        onChangeText: function onChangeText(useremail) {\n          return setuseremail(useremail);\n        },\n        placeholder: \"Enter Email\",\n        placeholderTextColor: \"#8b9cb5\",\n        autoCapitalize: \"none\",\n        keyboardType: \"email-address\",\n        returnKeyType: \"next\",\n        onSubmitEditing: function onSubmitEditing() {\n          return passwordInputRef.current && passwordInputRef.current.focus();\n        },\n        underlineColorAndroid: \"#f000\",\n        blurOnSubmit: false,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 33\n        }\n      })), React.createElement(View, {\n        style: styles.SectionStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }\n      }, React.createElement(TextInput, {\n        style: styles.inputStyle,\n        onChangeText: function onChangeText(password) {\n          return setpassword(password);\n        },\n        placeholder: \"Enter Password\",\n        placeholderTextColor: \"#8b9cb5\",\n        keyboardType: \"default\",\n        ref: passwordInputRef,\n        onSubmitEditing: Keyboard.dismiss,\n        blurOnSubmit: false,\n        secureTextEntry: true,\n        underlineColorAndroid: \"#f000\",\n        returnKeyType: \"next\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 33\n        }\n      })), errortext != '' ? React.createElement(Text, {\n        style: styles.errorTextStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 33\n        }\n      }, errortext) : null, React.createElement(TouchableOpacity, {\n        style: styles.buttonStyle,\n        activeOpacity: 0.5,\n        onPress: handleSubmitPress,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonTextStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 33\n        }\n      }, \"LOGIN\")), React.createElement(Text, {\n        style: styles.registerTextStyle,\n        onPress: function onPress() {\n          return navigation.navigate('RegisterScreen');\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }\n      }, \"New Here ? Register\")))));\n    };\n\n    return _this;\n  }\n\n  return LoginScreen;\n}(Component);\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#307ecc',\n    alignContent: 'center'\n  },\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#7DE24E',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 25\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  registerTextStyle: {\n    color: '#FFFFFF',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 14,\n    alignSelf: 'center',\n    padding: 10\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/MOBOMEDIA/mobotcmsdemo/Frontendtech/reactnative/story/TechVlog/Screens/loginscreen.js"],"names":["React","useState","createRef","Component","AsyncStorage","Loader","LoginScreen","navigation","useremail","setuseremail","password","setpassword","errortext","setErrortext","passwordInputRef","handleSubmitPress","alert","dataToSend","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","url","fetch","method","body","headers","then","response","json","responseJson","console","log","message","setItem","userid","replace","catch","error","styles","mainBody","flex","justifyContent","alignContent","alignItems","width","height","resizeMode","margin","SectionStyle","inputStyle","current","focus","Keyboard","dismiss","errorTextStyle","buttonStyle","buttonTextStyle","registerTextStyle","navigate","StyleSheet","create","backgroundColor","flexDirection","marginTop","marginLeft","marginRight","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","fontWeight","alignSelf","padding"],"mappings":"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","sourcesContent":["import React, { useState, createRef, Component } from 'react';\r\nimport {\r\n    StyleSheet,\r\n    TextInput,\r\n    View,\r\n    Text,\r\n    ScrollView,\r\n    Image,\r\n    Keyboard,\r\n    TouchableOpacity,\r\n    KeyboardAvoidingView,\r\n} from 'react-native';\r\n\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\n\r\nimport Loader from './loader';\r\nclass LoginScreen extends Component {\r\n    LoginScreen = ({ navigation }) => {\r\n        const [useremail, setuseremail] = useState('');\r\n        const [password, setpassword] = useState('');\r\n        // const [loading, setLoading] = useState(false);\r\n        const [errortext, setErrortext] = useState('');\r\n    \r\n        const passwordInputRef = createRef();\r\n    \r\n        const handleSubmitPress = () => {\r\n            setErrortext('');\r\n            if (!useremail) {\r\n                alert('Please fill Email');\r\n                return;\r\n            }\r\n            if (!password) {\r\n                alert('Please fill Password');\r\n                return;\r\n            }\r\n            // setLoading(true);\r\n            let dataToSend = { useremail: useremail, password: password };\r\n            let formBody = [];\r\n            for (let key in dataToSend) {\r\n                let encodedKey = encodeURIComponent(key);\r\n                let encodedValue = encodeURIComponent(dataToSend[key]);\r\n                formBody.push(encodedKey + '=' + encodedValue);\r\n            }\r\n            formBody = formBody.join('&');\r\n            const url = 'http://192.168.1.4:8000/api/login';\r\n    \r\n            // fetch('http://localhost:3000/api/user/login', {\r\n            fetch(url, {\r\n                method: 'POST',\r\n                body: formBody,\r\n                headers: {\r\n                    //Header Defination\r\n                    'Content-Type':\r\n                        'application/x-www-form-urlencoded;charset=UTF-8',\r\n                },\r\n            })\r\n                .then((response) => response.json())\r\n                .then((responseJson) => {\r\n                    //Hide Loader\r\n                    // setLoading(false);\r\n                    console.log(responseJson);\r\n                    // If server response message same as Data Matched\r\n                    if (responseJson.message === 'success') {\r\n                        AsyncStorage.setItem('user_id', responseJson.userid);\r\n                        // console.log(responseJson.data.email);\r\n                        // navigation.replace('DrawerNavigationRoutes');\r\n                        navigation.replace('DrawerNavigationRoutes', { responseJson } )\r\n                    } else {\r\n                        setErrortext(responseJson.message);\r\n                        console.log(responseJson.message);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    //Hide Loader\r\n                    // setLoading(false);\r\n                    console.error(error);\r\n                });\r\n        };\r\n    \r\n        return (\r\n            <View style={styles.mainBody}>\r\n                {/* <Loader loading={loading} /> */}\r\n                <ScrollView\r\n                    keyboardShouldPersistTaps=\"handled\"\r\n                    contentContainerStyle={{\r\n                        flex: 1,\r\n                        justifyContent: 'center',\r\n                        alignContent: 'center',\r\n                    }}>\r\n                    <View>\r\n                        <KeyboardAvoidingView enabled>\r\n                            <View style={{ alignItems: 'center' }}>\r\n                                <Image\r\n                                    // source={require('../Image/aboutreact.png')}\r\n                                    style={{\r\n                                        width: '50%',\r\n                                        height: 100,\r\n                                        resizeMode: 'contain',\r\n                                        margin: 30,\r\n                                    }}\r\n                                />\r\n                            </View>\r\n                            <View style={styles.SectionStyle}>\r\n                                <TextInput\r\n                                    style={styles.inputStyle}\r\n                                    onChangeText={(useremail) =>\r\n                                        setuseremail(useremail)\r\n                                    }\r\n                                    placeholder=\"Enter Email\" //dummy@abc.com\r\n                                    placeholderTextColor=\"#8b9cb5\"\r\n                                    autoCapitalize=\"none\"\r\n                                    keyboardType=\"email-address\"\r\n                                    returnKeyType=\"next\"\r\n                                    onSubmitEditing={() =>\r\n                                        passwordInputRef.current &&\r\n                                        passwordInputRef.current.focus()\r\n                                    }\r\n                                    underlineColorAndroid=\"#f000\"\r\n                                    blurOnSubmit={false}\r\n                                />\r\n                            </View>\r\n                            <View style={styles.SectionStyle}>\r\n                                <TextInput\r\n                                    style={styles.inputStyle}\r\n                                    onChangeText={(password) =>\r\n                                        setpassword(password)\r\n                                    }\r\n                                    placeholder=\"Enter Password\" //12345\r\n                                    placeholderTextColor=\"#8b9cb5\"\r\n                                    keyboardType=\"default\"\r\n                                    ref={passwordInputRef}\r\n                                    onSubmitEditing={Keyboard.dismiss}\r\n                                    blurOnSubmit={false}\r\n                                    secureTextEntry={true}\r\n                                    underlineColorAndroid=\"#f000\"\r\n                                    returnKeyType=\"next\"\r\n                                />\r\n                            </View>\r\n                            {errortext != '' ? (\r\n                                <Text style={styles.errorTextStyle}>\r\n                                    {errortext}\r\n                                </Text>\r\n                            ) : null}\r\n                            <TouchableOpacity\r\n                                style={styles.buttonStyle}\r\n                                activeOpacity={0.5}\r\n                                onPress={handleSubmitPress}>\r\n                                <Text style={styles.buttonTextStyle}>LOGIN</Text>\r\n                            </TouchableOpacity>\r\n                            <Text\r\n                                style={styles.registerTextStyle}\r\n                                onPress={() => navigation.navigate('RegisterScreen')}>\r\n                                New Here ? Register\r\n                </Text>\r\n                        </KeyboardAvoidingView>\r\n                    </View>\r\n                </ScrollView>\r\n            </View>\r\n        );\r\n    };\r\n}\r\n\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    mainBody: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        backgroundColor: '#307ecc',\r\n        alignContent: 'center',\r\n    },\r\n    SectionStyle: {\r\n        flexDirection: 'row',\r\n        height: 40,\r\n        marginTop: 20,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        margin: 10,\r\n    },\r\n    buttonStyle: {\r\n        backgroundColor: '#7DE24E',\r\n        borderWidth: 0,\r\n        color: '#FFFFFF',\r\n        borderColor: '#7DE24E',\r\n        height: 40,\r\n        alignItems: 'center',\r\n        borderRadius: 30,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        marginTop: 20,\r\n        marginBottom: 25,\r\n    },\r\n    buttonTextStyle: {\r\n        color: '#FFFFFF',\r\n        paddingVertical: 10,\r\n        fontSize: 16,\r\n    },\r\n    inputStyle: {\r\n        flex: 1,\r\n        color: 'white',\r\n        paddingLeft: 15,\r\n        paddingRight: 15,\r\n        borderWidth: 1,\r\n        borderRadius: 30,\r\n        borderColor: '#dadae8',\r\n    },\r\n    registerTextStyle: {\r\n        color: '#FFFFFF',\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 14,\r\n        alignSelf: 'center',\r\n        padding: 10,\r\n    },\r\n    errorTextStyle: {\r\n        color: 'red',\r\n        textAlign: 'center',\r\n        fontSize: 14,\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}